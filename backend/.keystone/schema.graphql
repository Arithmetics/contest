""" A keystone list """
type User {
  id: ID!
  email: String
  name: String
  userName: String
  password_is_set: Boolean
}

input UserWhereInput {
  AND: [UserWhereInput]
  OR: [UserWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  userName: String
  userName_not: String
  userName_contains: String
  userName_not_contains: String
  userName_starts_with: String
  userName_not_starts_with: String
  userName_ends_with: String
  userName_not_ends_with: String
  userName_i: String
  userName_not_i: String
  userName_contains_i: String
  userName_not_contains_i: String
  userName_starts_with_i: String
  userName_not_starts_with_i: String
  userName_ends_with_i: String
  userName_not_ends_with_i: String
  userName_in: [String]
  userName_not_in: [String]
  password_is_set: Boolean
}

input UserWhereUniqueInput {
  id: ID!
}

enum SortUsersBy {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  userName_ASC
  userName_DESC
}

input UserUpdateInput {
  email: String
  name: String
  userName: String
  password: String
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  email: String
  name: String
  userName: String
  password: String
}

input UsersCreateInput {
  data: UserCreateInput
}

input ContestImageRelateToOneInput {
  create: ContestImageCreateInput
  connect: ContestImageWhereUniqueInput
  disconnect: ContestImageWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type Contest {
  id: ID!
  name: String
  description: String
  status: String
  entryFee: Int
  image: ContestImage
}

input ContestWhereInput {
  AND: [ContestWhereInput]
  OR: [ContestWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  status: String
  status_not: String
  status_in: [String]
  status_not_in: [String]
  entryFee: Int
  entryFee_not: Int
  entryFee_lt: Int
  entryFee_lte: Int
  entryFee_gt: Int
  entryFee_gte: Int
  entryFee_in: [Int]
  entryFee_not_in: [Int]
  image: ContestImageWhereInput
  image_is_null: Boolean
}

input ContestWhereUniqueInput {
  id: ID!
}

enum SortContestsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  status_ASC
  status_DESC
  entryFee_ASC
  entryFee_DESC
  image_ASC
  image_DESC
}

input ContestUpdateInput {
  name: String
  description: String
  status: String
  entryFee: Int
  image: ContestImageRelateToOneInput
}

input ContestsUpdateInput {
  id: ID!
  data: ContestUpdateInput
}

input ContestCreateInput {
  name: String
  description: String
  status: String
  entryFee: Int
  image: ContestImageRelateToOneInput
}

input ContestsCreateInput {
  data: ContestCreateInput
}

type CloudinaryImage_File {
  id: ID
  path: String
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.` 
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input ContestRelateToOneInput {
  create: ContestCreateInput
  connect: ContestWhereUniqueInput
  disconnect: ContestWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type ContestImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  contest: Contest
}

input ContestImageWhereInput {
  AND: [ContestImageWhereInput]
  OR: [ContestImageWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  image: String
  image_not: String
  image_in: [String]
  image_not_in: [String]
  altText: String
  altText_not: String
  altText_contains: String
  altText_not_contains: String
  altText_starts_with: String
  altText_not_starts_with: String
  altText_ends_with: String
  altText_not_ends_with: String
  altText_i: String
  altText_not_i: String
  altText_contains_i: String
  altText_not_contains_i: String
  altText_starts_with_i: String
  altText_not_starts_with_i: String
  altText_ends_with_i: String
  altText_not_ends_with_i: String
  altText_in: [String]
  altText_not_in: [String]
  contest: ContestWhereInput
  contest_is_null: Boolean
}

input ContestImageWhereUniqueInput {
  id: ID!
}

enum SortContestImagesBy {
  id_ASC
  id_DESC
  altText_ASC
  altText_DESC
  contest_ASC
  contest_DESC
}

input ContestImageUpdateInput {
  image: Upload
  altText: String
  contest: ContestRelateToOneInput
}

input ContestImagesUpdateInput {
  id: ID!
  data: ContestImageUpdateInput
}

input ContestImageCreateInput {
  image: Upload
  altText: String
  contest: ContestRelateToOneInput
}

input ContestImagesCreateInput {
  data: ContestImageCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type _ListAccess {
  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'create' operations.
  NOTE: 'create' can only return a Boolean.
  It is not possible to specify a declarative Where clause for this
  operation
  """
  create: Boolean

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'read' operations.
  """
  read: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'update' operations.
  """
  update: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'delete' operations.
  """
  delete: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'auth' operations.
  """
  auth: JSON
}

type _ListQueries {
  """Single-item query name"""
  item: String

  """All-items query name"""
  list: String

  """List metadata query name"""
  meta: String
}

type _ListMutations {
  """Create mutation name"""
  create: String

  """Create many mutation name"""
  createMany: String

  """Update mutation name"""
  update: String

  """Update many mutation name"""
  updateMany: String

  """Delete mutation name"""
  delete: String

  """Delete many mutation name"""
  deleteMany: String
}

type _ListInputTypes {
  """Input type for matching multiple items"""
  whereInput: String

  """Input type for matching a unique item"""
  whereUniqueInput: String

  """Create mutation input type name"""
  createInput: String

  """Create many mutation input type name"""
  createManyInput: String

  """Update mutation name input"""
  updateInput: String

  """Update many mutation name input"""
  updateManyInput: String
}

type _ListSchemaFields {
  """The path of the field in its list"""
  path: String

  """The name of the field in its list"""
  name: String @deprecated(reason: "Use `path` instead")

  """The field type (ie, Checkbox, Text, etc)"""
  type: String
}

type _ListSchemaRelatedFields {
  """The typename as used in GraphQL queries"""
  type: String

  """A list of GraphQL field names"""
  fields: [String]
}

type _ListSchema {
  """The typename as used in GraphQL queries"""
  type: String

  """
  Top level GraphQL query names which either return this type, or
  provide aggregate information about this type
  """
  queries: _ListQueries

  """Top-level GraphQL mutation names"""
  mutations: _ListMutations

  """Top-level GraphQL input types"""
  inputTypes: _ListInputTypes

  """Information about fields defined on this list"""
  fields(where: _ListSchemaFieldsInput): [_ListSchemaFields]

  """
  Information about fields on other types which return this type, or
  provide aggregate information about this type
  """
  relatedFields: [_ListSchemaRelatedFields]
}

type _ListMeta {
  """The Keystone list key"""
  key: String

  """The Keystone List name"""
  name: String @deprecated(reason: "Use `key` instead")

  """The list's user-facing description"""
  description: String

  """The list's display name in the Admin UI"""
  label: String

  """The list's singular display name"""
  singular: String

  """The list's plural display name"""
  plural: String

  """The list's data path"""
  path: String

  """Access control configuration for the currently authenticated request"""
  access: _ListAccess

  """Information on the generated GraphQL schema"""
  schema: _ListSchema
}

type _QueryMeta {
  count: Int
}

input _ksListsMetaInput {
  key: String

  """Whether this is an auxiliary helper list"""
  auxiliary: Boolean
}

input _ListSchemaFieldsInput {
  type: String
}

type Mutation {
  """ Create a single User item. """
  createUser(data: UserCreateInput): User

  """ Create multiple User items. """
  createUsers(data: [UsersCreateInput]): [User]

  """ Update a single User item by ID. """
  updateUser(id: ID!, data: UserUpdateInput): User

  """ Update multiple User items by ID. """
  updateUsers(data: [UsersUpdateInput]): [User]

  """ Delete a single User item by ID. """
  deleteUser(id: ID!): User

  """ Delete multiple User items by ID. """
  deleteUsers(ids: [ID!]): [User]

  """ Create a single Contest item. """
  createContest(data: ContestCreateInput): Contest

  """ Create multiple Contest items. """
  createContests(data: [ContestsCreateInput]): [Contest]

  """ Update a single Contest item by ID. """
  updateContest(id: ID!, data: ContestUpdateInput): Contest

  """ Update multiple Contest items by ID. """
  updateContests(data: [ContestsUpdateInput]): [Contest]

  """ Delete a single Contest item by ID. """
  deleteContest(id: ID!): Contest

  """ Delete multiple Contest items by ID. """
  deleteContests(ids: [ID!]): [Contest]

  """ Create a single ContestImage item. """
  createContestImage(data: ContestImageCreateInput): ContestImage

  """ Create multiple ContestImage items. """
  createContestImages(data: [ContestImagesCreateInput]): [ContestImage]

  """ Update a single ContestImage item by ID. """
  updateContestImage(id: ID!, data: ContestImageUpdateInput): ContestImage

  """ Update multiple ContestImage items by ID. """
  updateContestImages(data: [ContestImagesUpdateInput]): [ContestImage]

  """ Delete a single ContestImage item by ID. """
  deleteContestImage(id: ID!): ContestImage

  """ Delete multiple ContestImage items by ID. """
  deleteContestImages(ids: [ID!]): [ContestImage]
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult!
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  userName: String
  email: String
  password: String
}

type Query {
  """ Search for all User items which match the where clause. """
  allUsers(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): [User]

  """ Search for the User item with the matching ID. """
  User(where: UserWhereUniqueInput!): User

  """ Perform a meta-query on all User items which match the where clause. """
  _allUsersMeta(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the User list. """
  _UsersMeta: _ListMeta

  """ Search for all Contest items which match the where clause. """
  allContests(where: ContestWhereInput, search: String, sortBy: [SortContestsBy!], orderBy: String, first: Int, skip: Int): [Contest]

  """ Search for the Contest item with the matching ID. """
  Contest(where: ContestWhereUniqueInput!): Contest

  """ Perform a meta-query on all Contest items which match the where clause. 
  """
  _allContestsMeta(where: ContestWhereInput, search: String, sortBy: [SortContestsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Contest list. """
  _ContestsMeta: _ListMeta

  """ Search for all ContestImage items which match the where clause. """
  allContestImages(where: ContestImageWhereInput, search: String, sortBy: [SortContestImagesBy!], orderBy: String, first: Int, skip: Int): [ContestImage]

  """ Search for the ContestImage item with the matching ID. """
  ContestImage(where: ContestImageWhereUniqueInput!): ContestImage

  """ Perform a meta-query on all ContestImage items which match the where clause. 
  """
  _allContestImagesMeta(where: ContestImageWhereInput, search: String, sortBy: [SortContestImagesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the ContestImage list. """
  _ContestImagesMeta: _ListMeta

  """ Retrieve the meta-data for all lists. """
  _ksListsMeta(where: _ksListsMetaInput): [_ListMeta]
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
