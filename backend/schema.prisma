datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model Bet {
  id       String   @id @default(cuid())
  user     User?    @relation("Bet_user", fields: [userId], references: [id])
  userId   String?  @map("user")
  choice   Choice?  @relation("Bet_choice", fields: [choiceId], references: [id])
  choiceId String?  @map("choice")
  isSuper  Boolean?

  @@index([userId])
  @@index([choiceId])
}

model Choice {
  id        String               @id @default(cuid())
  selection ChoiceSelectionType?
  isWin     Boolean?
  line      Line?                @relation("Choice_line", fields: [lineId], references: [id])
  lineId    String?              @map("line")
  bets      Bet[]                @relation("Bet_choice")

  @@index([lineId])
}

model CloudImage {
  id                    String    @id @default(cuid())
  image                 Json?
  altText               String?
  from_Contest_image    Contest[] @relation("Contest_image")
  from_Line_image       Line[]    @relation("Line_image")
  from_User_avatarImage User[]    @relation("User_avatarImage")
}

model Contest {
  id            String             @id @default(cuid())
  name          String?
  description   String?
  status        ContestStatusType?
  entryFee      Int?
  image         CloudImage?        @relation("Contest_image", fields: [imageId], references: [id])
  imageId       String?            @map("image")
  lines         Line[]             @relation("Line_contest")
  registrations Registration[]     @relation("Registration_contest")
  ruleSet       RuleSet?           @relation("Contest_ruleSet", fields: [ruleSetId], references: [id])
  ruleSetId     String?            @unique @map("ruleSet")

  @@index([imageId])
}

model Line {
  id          String      @id @default(cuid())
  title       String?
  closingTime DateTime?
  benchmark   Float?
  image       CloudImage? @relation("Line_image", fields: [imageId], references: [id])
  imageId     String?     @map("image")
  contest     Contest?    @relation("Line_contest", fields: [contestId], references: [id])
  contestId   String?     @map("contest")
  choices     Choice[]    @relation("Choice_line")
  standings   Standing[]  @relation("Standing_line")

  @@index([imageId])
  @@index([contestId])
}

model Registration {
  id        String   @id @default(cuid())
  hasPaid   Boolean?
  contest   Contest? @relation("Registration_contest", fields: [contestId], references: [id])
  contestId String?  @map("contest")
  user      User?    @relation("Registration_user", fields: [userId], references: [id])
  userId    String?  @map("user")

  @@index([contestId])
  @@index([userId])
}

model RuleSet {
  id                 String   @id @default(cuid())
  maxBets            Int?
  maxSuperBets       Int?
  superBetPointCount Int?
  contest            Contest? @relation("Contest_ruleSet")
}

model Standing {
  id          String  @id @default(cuid())
  gamesPlayed Int?
  wins        Int?
  totalGames  Int?
  line        Line?   @relation("Standing_line", fields: [lineId], references: [id])
  lineId      String? @map("line")

  @@index([lineId])
}

model User {
  id                      String         @id @default(cuid())
  email                   String?        @unique
  name                    String?
  userName                String?        @unique
  password                String?
  isAdmin                 Boolean?
  bets                    Bet[]          @relation("Bet_user")
  avatarImage             CloudImage?    @relation("User_avatarImage", fields: [avatarImageId], references: [id])
  avatarImageId           String?        @map("avatarImage")
  registrations           Registration[] @relation("Registration_user")
  passwordResetToken      String?
  passwordResetIssuedAt   DateTime?
  passwordResetRedeemedAt DateTime?

  @@index([avatarImageId])
}

enum ChoiceSelectionType {
  OVER
  UNDER
  AWAY
  HOME
}

enum ContestStatusType {
  OPEN
  IN_PROGRESS
  COMPLETE
}