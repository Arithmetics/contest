datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model Bet {
  id       Int     @id @default(autoincrement())
  user     User?   @relation("Betuser", fields: [userId], references: [id])
  userId   Int?    @map("user")
  choice   Choice? @relation("Betchoice", fields: [choiceId], references: [id])
  choiceId Int?    @map("choice")

  @@index([userId])
  @@index([choiceId])
}

model Choice {
  id        Int                  @id @default(autoincrement())
  selection ChoiceSelectionEnum?
  isWin     Boolean?
  line      Line?                @relation("Choiceline", fields: [lineId], references: [id])
  lineId    Int?                 @map("line")
  bets      Bet[]                @relation("Betchoice")

  @@index([lineId])
}

model Contest {
  id            Int                @id @default(autoincrement())
  name          String?
  description   String?
  status        ContestStatusEnum?
  entryFee      Int?
  image         CloudImage?        @relation("Contestimage", fields: [imageId], references: [id])
  imageId       Int?               @map("image")
  lines         Line[]             @relation("Linecontest")
  registrations Registration[]     @relation("Registrationcontest")

  @@index([imageId])
}

model CloudImage {
  id                    Int       @id @default(autoincrement())
  image                 Json?
  altText               String?
  from_Contest_image    Contest[] @relation("Contestimage")
  from_Line_image       Line[]    @relation("Lineimage")
  from_User_avatarImage User[]    @relation("UseravatarImage")
}

model Line {
  id          Int         @id @default(autoincrement())
  title       String?
  closingTime DateTime?
  benchmark   Float?
  image       CloudImage? @relation("Lineimage", fields: [imageId], references: [id])
  imageId     Int?        @map("image")
  contest     Contest?    @relation("Linecontest", fields: [contestId], references: [id])
  contestId   Int?        @map("contest")
  choices     Choice[]    @relation("Choiceline")

  @@index([imageId])
  @@index([contestId])
}

model User {
  id                      Int            @id @default(autoincrement())
  email                   String?        @unique
  name                    String?
  userName                String?        @unique
  password                String?
  isAdmin                 Boolean?
  passwordResetToken      String?
  passwordResetIssuedAt   DateTime?
  passwordResetRedeemedAt DateTime?
  bets                    Bet[]          @relation("Betuser")
  avatarImage             CloudImage?    @relation("UseravatarImage", fields: [avatarImageId], references: [id])
  avatarImageId           Int?           @map("avatarImage")
  registrations           Registration[] @relation("Registrationuser")

  @@index([avatarImageId])
}

model Registration {
  id        Int      @id @default(autoincrement())
  hasPaid   Boolean?
  contest   Contest? @relation("Registrationcontest", fields: [contestId], references: [id])
  contestId Int?     @map("contest")
  user      User?    @relation("Registrationuser", fields: [userId], references: [id])
  userId    Int?     @map("user")

  @@index([contestId])
  @@index([userId])
}

enum ChoiceSelectionEnum {
  OVER
  UNDER
  AWAY
  HOME
}

enum ContestStatusEnum {
  OPEN
  IN_PROGRESS
  COMPLETE
}